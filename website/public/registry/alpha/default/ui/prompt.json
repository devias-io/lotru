{
  "id": "ui/prompt",
  "name": "Prompt",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "files": [
    {
      "path": "ui/prompt.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AlertDialog as Primitive } from \"@base-ui-components/react/alert-dialog\";\nimport { styled } from \"@pigment-css/react\";\n\nimport { Button } from \"@/components/ui/button\";\n\ntype PromptVariant = \"danger\" | \"confirmation\";\n\nconst PromptContext = React.createContext<{ variant: PromptVariant }>({\n  variant: \"danger\",\n});\n\nconst usePromptContext = () => {\n  const context = React.useContext(PromptContext);\n\n  if (!context) {\n    throw new Error(\"usePromptContext must be used within a PromptProvider\");\n  }\n\n  return context;\n};\n\nconst PromptProvider = ({\n  variant,\n  children,\n}: React.PropsWithChildren<{\n  variant: PromptVariant;\n}>): React.JSX.Element => (\n  <PromptContext.Provider value={{ variant }}>{children}</PromptContext.Provider>\n);\nPromptProvider.displayName = \"PromptProvider\";\n\nconst Prompt = ({\n  /**\n   * The variant of the prompt.\n   */\n  variant = \"danger\",\n  ...props\n}: React.PropsWithChildren<{\n  variant?: PromptVariant;\n}>): React.JSX.Element => (\n  <PromptProvider variant={variant}>\n    <Primitive.Root {...props} />\n  </PromptProvider>\n);\nPrompt.displayName = \"Prompt\";\n\nconst PromptTrigger = Primitive.Trigger;\n\nconst PromptOverlay = styled(Primitive.Backdrop, {\n  name: \"PromptOverlay\",\n  slot: \"overlay\",\n})<React.ComponentProps<typeof Primitive.Backdrop>>({\n  backgroundColor: \"hsl(var(--color-overlay))\",\n  position: \"fixed\",\n  inset: 0,\n  zIndex: \"var(--zIndex-overlay)\",\n});\n\nconst PromptContent = styled(Primitive.Popup, {\n  name: \"PromptContent\",\n  slot: \"content\",\n})<React.ComponentProps<typeof Primitive.Popup>>({\n  backgroundColor: \"hsl(var(--color-surface))\",\n  border: \"1px solid hsl(var(--color-border))\",\n  borderRadius: \"var(--borderRadius-md)\",\n  boxShadow: \"var(--shadow-lg)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  fontFamily: \"var(--font-sans)\",\n  gap: \"calc(var(--spacing-unit) * 4)\",\n  insetBlockStart: \"50%\",\n  insetInlineStart: \"50%\",\n  maxWidth: \"var(--size-lg)\",\n  padding: \"calc(var(--spacing-unit) * 6)\",\n  position: \"fixed\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"var(--size-full)\",\n  zIndex: \"var(--zIndex-modal)\",\n});\n\nconst PromptHeader = styled(\"div\", {\n  name: \"PromptHeader\",\n  slot: \"header\",\n})<React.ComponentProps<\"div\">>({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"calc(var(--spacing-unit) * 2)\",\n});\n\nconst PromptFooter = styled(\"div\", {\n  name: \"PromptFooter\",\n  slot: \"footer\",\n})<React.ComponentProps<\"div\">>({\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  gap: \"calc(var(--spacing-unit) * 2)\",\n});\n\nconst PromptTitle = styled(Primitive.Title, {\n  name: \"PromptTitle\",\n  slot: \"title\",\n})<React.ComponentProps<typeof Primitive.Title>>({\n  fontSize: \"var(--fontSize-lg)\",\n  fontWeight: \"var(--fontWeight-semibold)\",\n  marginBlock: 0,\n});\n\nconst PromptDescription = styled(Primitive.Description, {\n  name: \"PromptDescription\",\n  slot: \"description\",\n})<React.ComponentProps<typeof Primitive.Description>>({\n  color: \"hsl(var(--color-mutedForeground))\",\n  fontSize: \"var(--fontSize-sm)\",\n  lineHeight: \"var(--lineHeight-tight)\",\n  marginBlock: 0,\n});\n\nconst PromptAction = ({\n  children,\n  type,\n  ...props\n}: React.PropsWithChildren<{\n  type?: \"button\" | \"submit\" | \"reset\";\n}>) => {\n  const { variant } = usePromptContext();\n\n  return (\n    <Primitive.Close\n      render={\n        <Button type={type} variant={variant === \"danger\" ? \"danger\" : \"solid\"}>\n          {children}\n        </Button>\n      }\n      {...props}\n    />\n  );\n};\nPromptAction.displayName = \"PromptAction\";\n\nconst PromptCancel = ({\n  children,\n  ...props\n}: React.PropsWithChildren<{\n  type?: \"button\" | \"submit\" | \"reset\";\n}>) => <Primitive.Close render={<Button variant=\"outline\">{children}</Button>} {...props} />;\nPromptCancel.displayName = \"PromptCancel\";\n\nexport {\n  Prompt,\n  PromptTrigger,\n  PromptOverlay,\n  PromptContent,\n  PromptHeader,\n  PromptFooter,\n  PromptTitle,\n  PromptDescription,\n  PromptAction,\n  PromptCancel,\n  usePromptContext,\n};\n"
    }
  ]
}