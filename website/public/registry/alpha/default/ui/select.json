{
  "id": "ui/select",
  "name": "Select",
  "dependencies": [
    "@base-ui-components/react"
  ],
  "files": [
    {
      "path": "ui/select.tsx",
      "content": "import * as React from \"react\";\nimport { Select as Primitive } from \"@base-ui-components/react/select\";\nimport { css, styled } from \"@pigment-css/react\";\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/cn\";\n\nconst Select = Primitive.Root;\n\nconst SelectTriggerRoot = styled(Primitive.Trigger, {\n  name: \"SelectTriggerRoot\",\n  slot: \"trigger\",\n})<\n  React.ComponentProps<typeof Primitive.Trigger> & {\n    size: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  }\n>({\n  alignItems: \"center\",\n  backgroundColor: \"var(--color-background)\",\n  border: \"1px solid hsl(var(--color-border))\",\n  borderRadius: \"var(--borderRadius-md)\",\n  boxSizing: \"border-box\",\n  color: \"inherit\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  maxWidth: \"var(--size-xs)\",\n  position: \"relative\",\n  whiteSpace: \"nowrap\",\n  width: \"var(--size-full)\",\n  \"&:focus-visible\": {\n    \"--ring-offset-width\": \"0px\",\n    \"--ring-offset-color\": \"hsl(var(--color-background))\",\n    \"--ring-offset-shadow\": \"0 0 0 var(--ring-offset-width) var(--ring-offset-color)\",\n    \"--ring-width\": \"3px\",\n    \"--ring-color\": \"hsl(var(--color-ring) / 20%)\",\n    \"--ring-shadow\": \"0 0 0 calc(var(--ring-offset-width) + var(--ring-width)) var(--ring-color)\",\n    borderColor: \"hsl(var(--color-ring))\",\n    boxShadow: \"var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)\",\n    outline: \"none\",\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    opacity: 0.5,\n  },\n  \"&[data-invalid]\": {\n    borderColor: \"hsl(var(--color-danger))\",\n  },\n  \"&[data-invalid]:focus-visible\": {\n    \"--ring-color\": \"hsl(var(--color-danger) / 20%)\",\n  },\n  variants: [\n    {\n      props: { size: \"sm\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 9)\",\n        minWidth: \"calc(var(--size-unit) * 9)\",\n        paddingBlock: \"calc(var(--spacing-unit) * 1.5)\",\n        paddingInline: \"calc(var(--spacing-unit) * 2.5)\",\n        \"@media (min-width: 768px)\": {\n          fontSize: \"var(--fontSize-sm)\",\n        },\n      },\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 10)\",\n        minWidth: \"calc(var(--size-unit) * 10)\",\n        paddingBlock: \"calc(var(--spacing-unit) * 2)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3)\",\n        \"@media (min-width: 768px)\": {\n          fontSize: \"var(--fontSize-sm)\",\n        },\n      },\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 11)\",\n        minWidth: \"calc(var(--size-unit) * 11)\",\n        paddingBlock: \"calc(var(--spacing-unit) * 2.5)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3.5)\",\n        \"@media (min-width: 768px)\": {\n          fontSize: \"var(--fontSize-lg)\",\n        },\n      },\n    },\n    {\n      props: { size: \"xl\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 12)\",\n        minWidth: \"calc(var(--size-unit) * 12)\",\n        paddingBlock: \"calc(var(--spacing-unit) * 3)\",\n        paddingInline: \"calc(var(--spacing-unit) * 4)\",\n        \"@media (min-width: 768px)\": {\n          fontSize: \"var(--fontSize-lg)\",\n        },\n      },\n    },\n  ],\n} as React.CSSProperties);\n\nconst SelectTrigger = ({\n  children,\n  size = \"md\",\n  ...props\n}: React.ComponentProps<typeof SelectTriggerRoot> & {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}): React.JSX.Element => (\n  <SelectTriggerRoot size={size} {...props}>\n    {children}\n    <Primitive.Icon\n      className={css({\n        alignItems: \"center\",\n        display: \"flex\",\n        justifyContent: \"center\",\n      })}\n    >\n      <ChevronDownIcon\n        className={css({\n          height: \"calc(var(--size-unit) * 4)\",\n          opacity: 0.5,\n          width: \"calc(var(--size-unit) * 4)\",\n        })}\n      />\n    </Primitive.Icon>\n  </SelectTriggerRoot>\n);\nSelectTrigger.displayName = \"SelectTrigger\";\n\nconst SelectValue = Primitive.Value;\n\nconst SelectContent = ({\n  children,\n  className,\n}: React.ComponentProps<typeof Primitive.Popup>): React.JSX.Element => {\n  return (\n    <Primitive.Portal>\n      <Primitive.Positioner side=\"bottom\">\n        <Primitive.Popup\n          className={cn(\n            css({\n              backgroundColor: \"hsl(var(--color-surface))\",\n              border: \"1px solid hsl(var(--color-border))\",\n              borderRadius: \"var(--borderRadius-md)\",\n              boxShadow: \"var(--shadow-md)\",\n              boxSizing: \"border-box\",\n              minWidth: \"calc(var(--size-unit) * 32)\",\n              padding: \"var(--spacing-unit)\",\n              width: \"var(--size-full)\",\n              zIndex: \"var(--zIndex-dropdown)\",\n              \"&:focus-within\": {\n                outline: \"none\",\n              },\n            }),\n            className as string\n          )}\n        >\n          {children}\n        </Primitive.Popup>\n      </Primitive.Positioner>\n    </Primitive.Portal>\n  );\n};\n\nconst SelectGroup = Primitive.Group;\n\nconst SelectGroupLabel = Primitive.GroupLabel;\n\nconst SelectItem = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Primitive.Item>): React.JSX.Element => {\n  return (\n    <Primitive.Item\n      className={cn(\n        css({\n          alignItems: \"center\",\n          borderRadius: \"var(--borderRadius-sm)\",\n          boxSizing: \"border-box\",\n          display: \"grid\",\n          gap: \"var(--spacing-unit)\",\n          gridTemplateColumns: \"1fr auto\",\n          paddingBlock: \"var(--spacing-unit)\",\n          paddingInline: \"calc(var(--spacing-unit) * 2)\",\n          userSelect: \"none\",\n          \"&:focus-visible\": {\n            backgroundColor: \"hsl(var(--color-muted))\",\n            outline: \"none\",\n          },\n          \"&[data-selected]\": {\n            backgroundColor: \"hsl(var(--color-muted))\",\n          },\n        } as React.CSSProperties),\n        className as string\n      )}\n      {...props}\n    >\n      <Primitive.ItemText\n        className={css({\n          fontSize: \"var(--fontSize-sm)\",\n          gridColumnStart: 1,\n        })}\n      >\n        {children}\n      </Primitive.ItemText>\n      <Primitive.ItemIndicator\n        className={css({\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gridColumnStart: 2,\n        })}\n      >\n        <CheckIcon\n          className={css({\n            height: \"calc(var(--size-unit) * 4)\",\n            width: \"calc(var(--size-unit) * 4)\",\n          })}\n        />\n      </Primitive.ItemIndicator>\n    </Primitive.Item>\n  );\n};\n\nexport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectItem,\n  SelectValue,\n};\n"
    }
  ]
}